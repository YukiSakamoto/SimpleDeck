# Generated by sila2.code_generator; sila2.__version__: 0.12.2
from __future__ import annotations

from abc import ABC, abstractmethod
from datetime import timedelta
from queue import Queue
from typing import TYPE_CHECKING, Any, List, Optional, Union

from sila2.server import FeatureImplementationBase, MetadataDict, ObservableCommandInstance

from .simpledeckserver_types import (
    DeleteItem_Responses,
    MoveItem_Responses,
    NewConsumable_Responses,
    PutItem_Responses,
    Refill_Responses,
    Use_Responses,
)

if TYPE_CHECKING:

    from ...server import Server


class SimpleDeckServerBase(FeatureImplementationBase, ABC):
    parent_server: Server

    _Status_producer_queue: Queue[Union[Any, Exception]]
    _Status_current_value: Any

    Refill_default_lifetime_of_execution: Optional[timedelta]

    Use_default_lifetime_of_execution: Optional[timedelta]

    def __init__(self, parent_server: Server):
        """
            Example implementation of a minimum Feature. Provides a Greeting to the Client
        and a StartYear property, informing about the year the Server has been started.
        """
        super().__init__(parent_server=parent_server)

        self._Status_producer_queue = Queue()

        self.Refill_default_lifetime_of_execution = None
        self.Use_default_lifetime_of_execution = None

    @abstractmethod
    def get_StartDate(self, *, metadata: MetadataDict) -> str:
        """
        Returns the date the SiLA Server has been started in.

        :param metadata: The SiLA Client Metadata attached to the call
        :return: Returns the date the SiLA Server has been started in.
        """

    @abstractmethod
    def get_ConsumableState(self, *, metadata: MetadataDict) -> List[Any]:
        """
        ConsumableState

        :param metadata: The SiLA Client Metadata attached to the call
        :return: ConsumableState
        """

    def update_Status(self, Status: Any, queue: Optional[Queue[Any]] = None) -> None:
        """
        Returns the Status of the workbench.

        This method updates the observable property 'Status'.

        :param queue: The queue to send updates to. If None, the default Queue will be used.
        """
        if queue is None:
            queue = self._Status_producer_queue
            self._Status_current_value = Status
        queue.put(Status)

    def Status_on_subscription(self, *, metadata: MetadataDict) -> Optional[Queue[Any]]:
        """
        Returns the Status of the workbench.

        This method is called when a client subscribes to the observable property 'Status'

        :param metadata: The SiLA Client Metadata attached to the call
        :return: Optional `Queue` that should be used for updating this property.
            If None, the default Queue will be used.
        """

    def abort_Status_subscriptions(self, error: Exception, queue: Optional[Queue[Any]] = None) -> None:
        """
        Returns the Status of the workbench.

        This method aborts subscriptions to the observable property 'Status'.

        :param error: The Exception to be sent to the subscribing client.
            If it is no DefinedExecutionError or UndefinedExecutionError, it will be wrapped in an UndefinedExecutionError.
        :param queue: The queue to abort. If None, the default Queue will be used.
        """
        if queue is None:
            queue = self._Status_producer_queue
        queue.put(error)

    @property
    def current_Status(self) -> Any:
        try:
            return self._Status_current_value
        except AttributeError:
            raise AttributeError("Observable property Status has never been set")

    @abstractmethod
    def PutItem(self, Spot: str, UUID: str, Type: str, *, metadata: MetadataDict) -> PutItem_Responses:
        """
        Does what it says: returns "Hello SiLA 2 + [Name]" to the client.


        :param Spot: The name of the Spot.

        :param UUID: The UUID of the New Object

        :param Type: The type of the New Object

        :param metadata: The SiLA Client Metadata attached to the call

        :return:

            - Result: The result of the operation.


        """

    @abstractmethod
    def DeleteItem(self, Spot: str, *, metadata: MetadataDict) -> DeleteItem_Responses:
        """
        Delete Item from specified Spot


        :param Spot: The name of the Spot

        :param metadata: The SiLA Client Metadata attached to the call

        :return:

            - Result: The result of the operation.


        """

    @abstractmethod
    def MoveItem(self, From: str, To: str, *, metadata: MetadataDict) -> MoveItem_Responses:
        """
        Move Item from and to specified Spot


        :param From: From Spot

        :param To: To Spot

        :param metadata: The SiLA Client Metadata attached to the call

        :return:

            - Result: The result of the operation.


        """

    @abstractmethod
    def NewConsumable(self, ItemType: str, Amount: int, *, metadata: MetadataDict) -> NewConsumable_Responses:
        """
        New Consumable


        :param ItemType: Item Type

        :param Amount: Amount

        :param metadata: The SiLA Client Metadata attached to the call

        :return:

            - Result: Result


        """

    @abstractmethod
    def Refill(
        self, ItemType: str, Amount: int, *, metadata: MetadataDict, instance: ObservableCommandInstance
    ) -> Refill_Responses:
        """
        Refill


        :param ItemType: Item Type

        :param Amount: Amount

        :param metadata: The SiLA Client Metadata attached to the call
        :param instance: The command instance, enabling sending status updates to subscribed clients

        :return:

            - Result: Result


        """

    @abstractmethod
    def Use(
        self, ItemType: str, Amount: int, *, metadata: MetadataDict, instance: ObservableCommandInstance
    ) -> Use_Responses:
        """
        Use


        :param ItemType: Item Type

        :param Amount: Amount

        :param metadata: The SiLA Client Metadata attached to the call
        :param instance: The command instance, enabling sending status updates to subscribed clients

        :return:

            - Result: Result


        """
