# Generated by sila2.code_generator; sila2.__version__: 0.12.2
# -----
# This class does not do anything useful at runtime. Its only purpose is to provide type annotations.
# Since sphinx does not support .pyi files (yet?), this is a .py file.
# -----

from __future__ import annotations

from typing import TYPE_CHECKING

if TYPE_CHECKING:

    from typing import Any, Iterable, List, Optional

    from sila2.client import (
        ClientMetadataInstance,
        ClientObservableCommandInstance,
        ClientObservableProperty,
        ClientUnobservableProperty,
    )
    from simpledeckserver_types import (
        DeleteItem_Responses,
        MoveItem_Responses,
        NewConsumable_Responses,
        PutItem_Responses,
        Refill_Responses,
        Use_Responses,
    )


class SimpleDeckServerClient:
    """
    Example implementation of a minimum Feature. Provides a Greeting to the Client
    and a StartYear property, informing about the year the Server has been started.
    """

    StartDate: ClientUnobservableProperty[str]
    """
    Returns the date the SiLA Server has been started in.
    """

    ConsumableState: ClientUnobservableProperty[List[Any]]
    """
    ConsumableState
    """

    Status: ClientObservableProperty[Any]
    """
    Returns the Status of the workbench.
    """

    def PutItem(
        self, Spot: str, UUID: str, Type: str, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> PutItem_Responses:
        """
        Does what it says: returns "Hello SiLA 2 + [Name]" to the client.
        """
        ...

    def DeleteItem(
        self, Spot: str, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> DeleteItem_Responses:
        """
        Delete Item from specified Spot
        """
        ...

    def MoveItem(
        self, From: str, To: str, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> MoveItem_Responses:
        """
        Move Item from and to specified Spot
        """
        ...

    def NewConsumable(
        self, ItemType: str, Amount: int, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> NewConsumable_Responses:
        """
        New Consumable
        """
        ...

    def Refill(
        self, ItemType: str, Amount: int, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> ClientObservableCommandInstance[Refill_Responses]:
        """
        Refill
        """
        ...

    def Use(
        self, ItemType: str, Amount: int, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> ClientObservableCommandInstance[Use_Responses]:
        """
        Use
        """
        ...
