# Generated by sila2.code_generator; sila2.__version__: 0.12.2
from __future__ import annotations

from typing import TYPE_CHECKING

from sila2.server import MetadataDict

from ..generated.simpledeckserver import (
    ConsumableState_Responses,
    DeleteItem_Responses,
    MoveItem_Responses,
    NewConsumable_Responses,
    PutItem_Responses,
    Refill_Responses,
    SimpleDeckServerBase,
    Use_Responses,
)

if TYPE_CHECKING:
    from ..server import Server

import requests
import uuid
class SimpleDeckServerImpl(SimpleDeckServerBase):
    def __init__(self, parent_server: Server) -> None:
        super().__init__(parent_server=parent_server)

    def get_StartDate(self, *, metadata: MetadataDict) -> str:
        raise NotImplementedError  # TODO

    def PutItem(self, Spot: str, UUID: str, Type: str, *, metadata: MetadataDict) -> PutItem_Responses:
        url = "http://localhost:8000/put_item/{}/".format(Spot)
        payload = {
            "uuid": UUID,
            "item_type": Type
        }
        response = requests.put(url, json = payload)
        print("PutItem: Status Code: {}".format(response.status_code))
        print("Response Body: {}".format(response.json()))
        if response.status_code == 200:
            #return True
            return PutItem_Responses(True)
        else:
            #return False
            return PutItem_Responses(False)
        raise NotImplementedError  # TODO

    def DeleteItem(self, Spot: str, *, metadata: MetadataDict) -> DeleteItem_Responses:
        url = "http://localhost:8000/delete/{}/".format(Spot)
        response = requests.delete(url)
        print("DeleteItem: Status Code: {}".format(response.status_code))
        if response.status_code == 200:
            return DeleteItem_Responses(True)
        elif response.status_code == 422:
            return DeleteItem_Responses(False)
        else:
            return DeleteItem_Responses(False)
        raise NotImplementedError  # TODO

    def MoveItem(self, From: str, To: str, *, metadata: MetadataDict) -> MoveItem_Responses:
        url = "http://localhost:8000/move"
        payload = {
            "from_spot": From,
            "to_spot": To
        }
        response = requests.post(url, json = payload)
        print("MoveItem: Status Code: {}".format(response.status_code))
        print("Response Body: {}".format(response.json()))
        if response.status_code == 200:
            return MoveItem_Responses(True)
        else:
            return MoveItem_Responses(False)
        raise NotImplementedError  # TODO

    def NewConsumable(self, ItemType: str, Amount: int, *, metadata: MetadataDict) -> NewConsumable_Responses:
        url = "http://localhost:8000/move"
        payload = {
            "item_type": ItemType,
            "amount": Amount
        }
        response = requests.post(url, json = payload)
        print("New Consumable: Status Code: {}".format(response.status_code))
        print("Response Body: {}".format(response.json()))
        if response.status_code == 200:
            return NewConsumable_Responses(True)
        else:
            return NewConsumable_Responses(False)
        raise NotImplementedError  # TODO

    def Refill(self, ItemType: str, Amount: int, *, metadata: MetadataDict) -> Refill_Responses:
        url = "http://localhost:8000/refill"
        payload = {
            "item_type": ItemType,
            "amount": Amount
        }
        response = requests.patch(url, json = payload)
        print("Refill: Status Code: {}".format(response.status_code))
        print("Response Body: {}".format(response.json()))
        if response.status_code == 200:
            return Refill_Responses(True)
        else:
            return Refill_Responses(False)
        raise NotImplementedError  # TODO

    def Use(self, ItemType: str, Amount: int, *, metadata: MetadataDict) -> Use_Responses:
        url = "http://localhost:8000/use"
        payload = {
            "item_type": ItemType,
            "amount": Amount
        }
        response = requests.patch(url, json = payload)
        print("Use: Status Code: {}".format(response.status_code))
        print("Response Body: {}".format(response.json()))
        if response.status_code == 200:
            return Use_Responses(True)
        else:
            return Use_Responses(False)
        raise NotImplementedError  # TODO

    def ConsumableState(
        self, *, metadata: MetadataDict, instance: ObservableCommandInstance
    ) -> ConsumableState_Responses:
        # set execution status from `waiting` to `running`
        instance.begin_execution()

        raise NotImplementedError  # TODO