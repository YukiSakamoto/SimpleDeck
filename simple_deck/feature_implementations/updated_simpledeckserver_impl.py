# Generated by sila2.code_generator; sila2.__version__: 0.12.2
from __future__ import annotations

from datetime import timedelta
from typing import TYPE_CHECKING

from sila2.server import MetadataDict, ObservableCommandInstance

from ..generated.simpledeckserver import (
    ConsumableState_Responses,
    DeleteItem_Responses,
    MoveItem_Responses,
    NewConsumable_Responses,
    PutItem_Responses,
    Refill_Responses,
    SimpleDeckServerBase,
    Use_Responses,
)

if TYPE_CHECKING:
    from ..server import Server


class SimpleDeckServerImpl(SimpleDeckServerBase):
    def __init__(self, parent_server: Server) -> None:
        super().__init__(parent_server=parent_server)

        # Default lifetime of observable command instances. Possible values:
        # None: Command instance is valid and stored in memory until server shutdown
        # datetime.timedelta: Command instance is deleted after this duration, can be increased during command runtime
        self.ConsumableState_default_lifetime_of_execution = timedelta(minutes=30)

    def get_StartDate(self, *, metadata: MetadataDict) -> str:
        raise NotImplementedError  # TODO

    def PutItem(self, Spot: str, UUID: str, Type: str, *, metadata: MetadataDict) -> PutItem_Responses:
        raise NotImplementedError  # TODO

    def DeleteItem(self, Spot: str, *, metadata: MetadataDict) -> DeleteItem_Responses:
        raise NotImplementedError  # TODO

    def MoveItem(self, From: str, To: str, *, metadata: MetadataDict) -> MoveItem_Responses:
        raise NotImplementedError  # TODO

    def NewConsumable(self, ItemType: str, Amount: int, *, metadata: MetadataDict) -> NewConsumable_Responses:
        raise NotImplementedError  # TODO

    def Refill(self, ItemType: str, Amount: int, *, metadata: MetadataDict) -> Refill_Responses:
        raise NotImplementedError  # TODO

    def Use(self, ItemType: str, Amount: int, *, metadata: MetadataDict) -> Use_Responses:
        raise NotImplementedError  # TODO

    def ConsumableState(
        self, *, metadata: MetadataDict, instance: ObservableCommandInstance
    ) -> ConsumableState_Responses:
        # set execution status from `waiting` to `running`
        instance.begin_execution()

        raise NotImplementedError  # TODO
